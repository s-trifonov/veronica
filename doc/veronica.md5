= Вероника, стенд для разметки изображений =

Программа Вероника предназначена для разметки серийных изображений, выполненных на электронном микроскопе, в общем виде - в целях анализа этих отображений. В своей первой версии аналитический функционал программы минимален  (в перспективе этот аспект будет развиваться), и основной задачей программы в настоящий момент является проведение ручной разметки изображений и аккуратноe  и надёжное сохранениe результатов. 

Программа реализует среду разметки серийных изображений, и ориентирована на то, чтобы сделать этот процесс удобным и надёжным. Критерии удобства здесь преследуют не только и не столько эстетические цели: от их уровня зависит качество разметки, возможность доверять её результату. Программа находится в фазе разработки и стабилизации, вполне возможны её падения. Случаи таких падений, а также пожелания по улучшениям работы просьба по возможности незамедлительно сообщать по адресу разработчика: Trf@ya.ru
Желательно регулярное обновление версий программы из репозитория - по крайней мере в периоды, когда разработка программы ведётся активно. 

**Контекст проекта**: существенная часть регламентаций при работе в среде программы определяется конкретными требованиями задачи разметки и её организации. В настоящее время подразумевается наличие только одного проекта: разметка везикул, но в перспективе проектов может быть много. Ниже маркировка [контекст проекта] означает, что конкретные требования должны определяться на этом уровне, а не на уровне общей среды. 

== Установка и администрирование ===

=== MongoDb, как сервис хранения результатов разметки ===

Программа/среда использует в качестве сервиса хранения результата сервис MongoDB. Это - универсальная база данных, хранящая данные в формате JSON, популярное средство в среде проектов с отрытым кодом. (Известно, что это средство "очень тормозит" на "больших" объёмах данных - но наши потребности не предполагают столь больших объёмов даже в перспективе.)

Он без труда устанавливается на Linux, с минимальными сложностями на Windows:
https://www.mongodb.com/docs/manual/installation/

Для клиентов сервиса он идентифицируется адресом машины и портом.

В контексте проекта по-видимому желательно, чтобы все результаты по разметке собирались вместе и использовались в общем комплексе - в этом случае рекомендуется развернуть единый общий сервис MongoDB с доступом через Интранет. Возможен другой вариант эксплуатации: установка сервиса MongoDB локально, на каждом из компьютеров, и использование этого сервиса каждым разметкиком в автономе. В любо случае: *перед разворачиванием и использованием программы* рекомендовано установить какой-либо вариант сервиса MongoDb.

=== Установка на Linux ====

**1.**

Требуется: предустановленная версия python3. Версии 3.10 и и выше. А также программа git.

Основной репозиторий кода программы:
https://github.com/s-trifonov/veronica

Установить копию репозитория (внутрь текущей директории, в примере ниже это директория "~/work/veronica/"):
> git clone https://github.com/s-trifonov/veronica.git

**2.** Виртуальное окружение

Для работы с программой в Linux рекомендуется создать и использовать виртуальное окружение. 

Создание окружения:
> python3 -m venv ~/.veronica-venv

Активация окружения: (внимание, эту команду надо выполнять не только при инсталляци, но и перед запуском самой программы!)
> source ~/.veronica-venv/bin/activate

Инсталляция пакетов, требуемых для запуска основной программы (директория "~/work/veronica/" указана в соответствии с примером)

(.veronica-venv0) trifon@trifon-ThinkPad-T480:~$ pip install -r ~/work/veronica/requirements.txt 

Запуск программы (директория запуска оговаривается ниже, указанный в примере путь "/home/trifon/work/veronica/src/" должен быть изменён на путь, где лежит директория src установленной копии репозитория):

> PYTHONPATH="/home/trifon/work/veronica/src/" python3 -m app.veronica


=== Установка на Windows ====
(В варианте Windows - не знаю, как правильно использовать виртуальное окружение. 
Вариант: инсталляция Python3 производится специально для использования данной программы Вероника. В этом случае установка пакетов (pip install -r ...) выполняется без виртуального окружения, прямо вовнутрь инсталляции Питона) 

== Описание программы для пользователей ==

=== Расположение изображений и запуск программы ===

Изображения, с которыми работает программа, должны располагаться в одной директории, в двухуровневом виде: на верхнем уровне - директории, в именах которых фиксируются названия образцов, на нижнем, втором уровне - сами серий изображений, снятые по конкретному образцу. Пример:

Верхний уровень: 
/home/trifon/work/veronica/data/2024-07-16_17_extracellular_vesicles_cryoEM/

Примечание: название в примере не совсем правильное, подразумевает, что ВСЕ изобряжения сняты с датой 2024-07-16, желательно, чтобы верхняя директория позволяла добавлять в неё образцы, снятые в другие дни...

Внутренний уровень:
2024-07-16_control  
2024-07-17_stomach_cancer

Внутри этих директорий - файлы формата TIF, соответствующие образцу.

Рекомендуется положить в директория верхнего уровня конфигурационный файл "v0.prj" со следующим (переконфигурированным содержимым):

{
    "mongo-host": "localhost",
    "mongo-port": 27017,
    "mongo-top": "Veronica",
    "prj-mode": "Vesiculae.0",
    "prj-name": "V0",
    "dir": "/home/trifon/work/veronica/data/2024-07-16_17_extracellular_vesicles_cryoEM/"
}

Здесь: 

* mongo-... параметры задаются в контексте проекта (определяются администратором проекта), 

* prj-mode - (пока) зафиксированное значение, определяющее контекст проекта

* prj-name - просто имя

* dir - директория корня, где лежат изображения

Запускать программу нужно из директории, где лежит файл "v0.prj", и больше нет никаких файлов с расширением "*.prj":

> PYTHONPATH="/home/trifon/work/veronica/src/" python3 -m app.veronica

Примечание. Так, как рекомендовано, директория запуска программы - это и есть директория корня проекта, но вообще говоря "v0.prj" можно положить в другую директорию и запускать оттуда; можно также явно указать в строке запуска путь на v0.prj (или какое другое имя), и запускаться из произвольной директории. Критичесики важно правильно установить переменную окружения PYTHONPATH. 

=== Общая логика программы ===

=== Организация разметки изображений ===

=== Элементы раметки изображений ===

В контексте разметки изображений с везикулами предоставляется возможность размечать следующие графические элементы:

- **везикула**: замкнутая сплайн-кривая, отрисовывается синим

- **сегмент везикулы**: незамкнутая сплайн-кривая, отрисовывается фиолетовым

- **линия помех**: незамкнутая сплайн-кривая, отрисовывается светло-голубым

- **клякса**: замкнутая сплайн-кривая, ограниченная область отрисовывается светло-голубой штриховкой

- **грязь**: замкнутая ломаная, ограниченная область отрисовывается синей штриховкой

В контексте проекта по везикулам рекомендуется:
 - размечать только типы **везикула** и **сегмент везикулы**
 - не размечать везикулы, если они вылезают за рамки изображения, при этом имея регулярную форму
 
 
Для добавления нового элемента в разметку нужно нажать кнопку с изображением зелёного плюса, и выбрать требуемый тип элемента (везикула / сегмент везикулы / и т.д). Далее указать по одной несколько точек - число определяется типом элемента. Указание выполняется левой клавишей на мыши.

Внимание: после определения нового элемента система остаётся в режиме определения новых элементов разметки: можно определить подряд несколько элементов. Чтобы выйти из режима, отожмите кнопку с изображением зелёного плюса.

В нормальном режиме работы (с отжатой кнопкой с зелёным крестом) указание точки на изображении левой клавишей мыши вблизи элементов разметки (для площадей - вблизи границы) приводит к выделению элемента, и проявлению контрольных точек, определяющих элемент. Контрольные точки можно передвигать левой клавишей мыши. 

Добавление новых точек/сегментов в элемент выполняется кликом левой клавишей мыши при нажатой на клавиатуре клавише Shift. При этой нажатой клавише курсор мыши меняет свою форму над позициями, в которых операция добавления допустима.

Удаление лишних точек/сегментов из элемента выполняется кликом левой клавиши мыши при нажатой на клавиатуре клавише Ctrl. При этой нажатой клавише курсор мыши меняет свою форму над позициями, в которых операция удаления допустима - если количество точек/сегментов в элементе больше минимального.

Сплайн-кривые формируются из т.н. сегментов Безье, или кубических сплайнов Безье. Каждый сегмент определяется четырьмя точками: две крайние точки являются концами сегментов. Две управляющие промежуточные точки располагаются на плоскости произвольно, на задаваемой кривой как правило не лежат, но определяют касательные направления в концах сегмента. 

Для элементов типа "замкнутая сплайн-кривая" (везикула / клякса) минимальная конфигурация состоит из двух сегментов - 6 управляющих точек. При начальном определении такого элемента определяются две точки: строится сплайн-кривая, близкая к окружности, и опирающаяся на эти точки, как на (почти) диаметр. При дальнейшем редактировании элемент можно усложнить до кривой очень сложного вида: и движением контрольных точек, и вставкой дополнительных сегментов (с клавишей Shift). При задании сложной фогуры рекомендуется (но не обязательно) начинать разметку с указания двух самых дальних друг от друга "противоположных" точек. 

При заданиии/редактировании элементов разметки работает откатка, а (также реверс откатки) - см. кнопки с соответствующими стрелочками (зелёной и жёлтой). Задание/редактирование разметки необходимо закончить нажатем на кнопку сохранения - иначе модификации потеряются.

При первоначальном ознакомлении с программой рекомендуется попрактиковаться в задании/редактировании элементов разметки,  соотнести его с этим описанием и уяснить, как вся эта функциональность работает. Это уменьшит трудности при выполнении дальнейшей разметки.  
